#+TITLE: Doom Configuration file
* Config
** Personal Information
*** Set full name
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Casper Weiss Bang")
#+END_SRC
*** Set email address
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "cawb@itu.dk")
#+END_SRC
** tabsize
Set width for tabs
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC
** Strech cursor
Stretch cursor to the glyph width
#+BEGIN_SRC emacs-lisp
(setq-default x-stretch-cursor t)
#+END_SRC
** Color themes
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 12))
(setq doom-theme 'doom-nord)
;; Edit org coloring levels, so it follows the official palette.
(custom-set-faces
 '(org-level-1 ((t (:foreground "#8fbcbb" :weight extra-bold))))
 '(org-level-2 ((t (:foreground "#88C0D0" :weight bold))))
 '(org-level-3 ((t (:foreground "#81a1c1" :weight semi-bold))))
 '(org-level-4 ((t (:foreground "#5e81ac" :weight normal))))
 '(org-level-5 ((t (:inherit org-level-4))))
 '(org-level-6 ((t (:inherit org-level-4))))
 '(org-level-7 ((t (:inherit org-level-4))))
 '(org-level-8 ((t (:inherit org-level-4)))))

#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(setq projectile-indexing-method 'alien
      projectile-sort-order 'recently-active
      projectile-globally-ignored-files '(".DS_Store" "Icon" "TAGS")
      projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o")
      projectile-globally-ignored-directories '("node_modules")
      projectile-enable-caching t)
#+END_SRC
** Languages
*** Python
#+BEGIN_SRC emacs-lisp

(use-package! python-black
  :demand t
  :after python)
(add-hook! 'python-mode-hook #'python-black-on-save-mode)
;; Feel free to throw your own personal keybindings here
(map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)
(map! :leader :desc "Blacken Region" "m b r" #'python-black-region)
(map! :leader :desc "Blacken Statement" "m b s" #'python-black-statement)

(setq-hook! python-mode python-indent-offset 4)

(add-hook! 'python-mode-hook (modify-syntax-entry ?_ "w"))
#+END_SRC
** ORG-mode
*** Directory
#+BEGIN_SRC emacs-lisp
(after! org
   (setq org-directory "~/Documents/org/")
)

#+END_SRC
*** Auto fill
#+BEGIN_SRC emacs-lisp
(after! org
  (auto-fill-mode 1)
  )
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
*** Org agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Documents/org/inbox.org"
                         "~/Documents/org/gtd.org"
                         "~/Documents/org/wishlist.org"
                         "~/Documents/org/gcal.org"
                         "~/Documents/org/tickler.org"))
#+END_SRC

*** Org agenda Prefixes
#+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format
        (quote
         ((agenda . " %i %-12:c%?-12t% s")
          (todo . "%l %i %-6:c")
          (tags . " %i %-12:c")
          (search . " %i %-12:c"))))
#+END_SRC

*** Syntax highlight PDF
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  '(add-to-list 'org-latex-packages-alist '("" "minted")))
(setq org-latex-listings 'minted)
 (setq org-latex-minted-options
     '(("frame" "lines") ("linenos=true") ("xleftmargin=20pt") ))
(eval-after-load 'tex-mode
  '(setcar (cdr (cddaar tex-compile-commands)) " -shell-escape "))
(eval-after-load 'ox-latex
  '(setq org-latex-pdf-process
         '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -f %f")))

#+END_SRC
*** Refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(("~/Documents/org/gtd.org" :maxlevel . 3)
                           ("~/Documents/org/someday.org" :level . 1)
                           ("~/Documents/org/archive.org" :level . 1)
                           ("~/Documents/org/wishlist.org" :level . 1)
                           ("~/Documents/org/tickler.org" :maxlevel . 2)))
#+END_SRC
*** Capture templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Documents/org/gtd.org" "Backlog")
                                 "* TODO %i%?")
                                ("n" "Note" entry
                                 (file+headline "~/Documents/org/notes.org" "Notes")
                                 "* %U \n%i%?")
                                ("f" "Frida Journal" entry
                                 (file+headline "~/Documents/org/frida.org" "Fridas dagbog")
                                 "* %U \n%i%?")
                                ("w" "Wish" entry
                                 (file+headline "~/Documents/org/wishlist.org" "Wishlist")
                                 "* %i%?")
                                ))
)
#+END_SRC
*** Always show images
#+BEGIN_SRC emacs-lisp
(after! org-ref
  (setq org-startup-with-inline-images "inlineimages")
)
#+END_SRC

*** export to keybase
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-publish-project-alist
        `(("KBP"
           :base-directory "~/Documents/org/kbp"
           :publishing-directory "/keybase/public/cabang/"
           :publishing-function org-twbs-publish-to-html
           ;;:section-numbers nil
           :with-headline-numbers nil
           ;;:table-of-contents nil
           :html-head-extra ,(format "<style type=\"text/css\">%s</style>"
                                     (with-temp-buffer
                                       (insert-file-contents "~/.config/doom/nord.css")
                                       (buffer-string))
                                     )
           )))
)
#+END_SRC
*** Exporting
#+BEGIN_SRC emacs-lisp
;; newline on toc
(org-babel-do-load-languages
 'org-babel-load-languages
 '((plantuml . t)))
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+END_SRC
*** Org-ref / bibtex
**** set paths
#+BEGIN_SRC emacs-lisp
;;(after! org
;;     (setq bibtex-completion-bibliography "~/Documents/bibliography/references.bib"
;;         bibtex-completion-library-path "~/Documents/bibliography/bibtex-pdfs"
;;         bibtex-completion-notes-path "~/Documents/bibliography/helm-bibtex-notes")
;; )
#+END_SRC
**** Pre/Post text support
#+begin_src emacs-lisp
(after! org-ref
    (setf (cdr (assoc 'org-mode bibtex-completion-format-citation-functions)) 'org-ref-format-citation)
)
#+end_src

**** How to open files
#+BEGIN_SRC emacs-lisp
(after! org
    (setq bibtex-completion-pdf-open-function 'org-open-file)
)
#+END_SRC
**** Export to PDF/LaTeX
#+BEGIN_SRC emacs-lisp
(after! org
    (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "pdflatex -interaction nonstopmode -output-directory %o %f"
        "pdflatex -interaction nonstopmode -output-directory %o %f"))
)
(after! org
    (setq bibtex-dialect 'biblatex)
)
#+END_SRC

*** Dot / graphviz
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t))) ; this line activates dot
#+END_SRC

*** IEEEtran export
#+begin_src elisp
(after! org
    (setq org-latex-classes
        '(
            ("IEEEtran"
                "\\documentclass{IEEEtran}
                \\usepackage{cite}
                \\usepackage{amsmath,amssymb,amsfonts}
                \\usepackage{algorithmic}
                \\usepackage{graphicx}
                \\usepackage{textcomp}
                \\usepackage{xcolor}
                \\usepackage{hyperref}
                [DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
            )
            ("article"
                "\\documentclass[11pt]{article}
                [DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
            )

            ("report" "\\documentclass[11pt]{report}"
                ("\\part{%s}" . "\\part*{%s}")
                ("\\chapter{%s}" . "\\chapter*{%s}")
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            )

            ("book" "\\documentclass[11pt]{book}"
                ("\\part{%s}" . "\\part*{%s}")
                ("\\chapter{%s}" . "\\chapter*{%s}")
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            )
        )
    )
)
#+end_src
**** TODO automatically handle /abstract/
*** Change the character that displays on collapsed headings
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " â–¼ ")
#+END_SRC
** Ranger-mode
#+BEGIN_SRC emacs-lisp
(map! (:leader (:prefix "o" :desc "Ranger" :nv "F" 'ranger)))
(after! ranger
  (setq ranger-ignored-extensions '("mkv" "iso" "mp4"))
  (setq ranger-show-hidden t)
  (setq ranger-cleanup-on-disable t)
  (setq ranger-cleanup-eagerly t)
)

#+END_SRC
** Movements
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :en "C-h"   #'evil-window-left
   :en "C-j"   #'evil-window-down
   :en "C-k"   #'evil-window-up
   :en "C-l"   #'evil-window-right))
#+END_SRC
** RSS
#+BEGIN_SRC emacs-lisp
;; el feed
(global-set-key (kbd "C-x w") 'elfeed)
(setq elfeed-feeds
      '("http://nullprogram.com/feed/"
        "https://node2.feed43.com/2538022243138888.xml"
        "https://www.dr.dk/nyheder/service/feeds/allenyheder"
        ))


#+END_SRC
** Hacks
So i got an error, and based on [[https://www.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/][this]] the following should fix it
#+BEGIN_SRC emacs-lisp
(setq max-specpdl-size 13000)
#+END_SRC

* Sources
** https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#emacseshell
** https://github.com/hlissner/doom-emacs-private/blob/master/config.el
